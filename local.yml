services:
  postgres:
    build:
      context: ./postgres
      dockerfile: ./Dockerfile
    image: djangoblog_local_postgres_img
    container_name: djangoblog_local_postgres
    restart: always
    env_file:
      - ./.envs/local/postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    # user: "${UID:-1000}:${GID:-1000}" #<- postgresにはこれはかけない
    # healthcheck:
    #   #ヘルスチェック(postgresが正常に動作しているかどうか)は以下のスクリプトを実行して行う
    #   # test: ["CMD", "/usr/local/bin/check-db.sh"]
    #   test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 10
  backend:
    build:
      context: .
      dockerfile: ./backend/dockerfile/local/Dockerfile
    working_dir: /app
    image: djangoblog_local_backend_img
    container_name: djangoblog_local_backend
    restart: always
    user: "${UID:-1000}:${GID:-1000}"
    depends_on:
      - postgres
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    env_file:
      - ./.envs/local/django
      - ./.envs/local/postgres
    volumes:
      - ./backend:/app
      # 以下はバックエンドディレクトリの外にあるpytestファイルを、コンテナのapp内に置かないとテストができないのでマウント
      # - ./pytest.ini:/app/pytest.ini
    ports:
      - "8000:8000"
    command: python manage.py runserver 0.0.0.0:8000
  frontend:
    build: # docker-compose buildまたは、docker-compose up --buildを使ったときの、Dockerfileを使ってイメージをビルドする設定
      # https://qiita.com/Mayumi_Pythonista/items/f69f7a1e8b0bbeab9560
      context: ./frontend # ビルドのコンテキスト（Dockerfileのベースとなるディレクトリ
      dockerfile: ./dockerfile/local/Dockerfile   # 使用するDockerfileのパス ビルドでやることはこのDockerfileに記載
    working_dir: /app  # コンテナを起動した後の、コンテナ内での作業ディレクトリ commandやentrypointはこのディレクトリを基準とする
    image: djangoblog_local_frontend_img  # ビルド後のイメージ名
    container_name: djangoblog_local_frontend  # 起動するコンテナの名前（任意）
    env_file:
      - ./.envs/local/frontend
    volumes:
      - ./frontend:/app  # ホストの ./frontend をコンテナの /app にマウント（コード変更が即反映される）
      - node_modules:/app/node_modules  # node_modules はボリュームで分離（ホストと衝突を避ける）ただしこのディレクトリはroot所有者になる。
    user: "${UID:-1000}:${GID:-1000}" # docker-composeコマンドでの操作はこのuid,gidで実施する(default値はともに1000) このdocker-compose.yml内でファイルを生成するときに重要
    restart: always  # コンテナが落ちたときに自動で再起動
    ports:
      - "5173:5173"  # ホストの5173番ポートをコンテナの5173番ポートに接続（Viteの開発サーバ用）
    command: npm run dev --host # コンテナ起動時にVite開発サーバを起動
  playwright-mock:
    build:
      context: .
      dockerfile: ./playwright-mock/dockerfile/local/Dockerfile
    image: djangoblog_local_playwright_mock_img
    container_name: djangoblog_local_playwright_mock
    profiles: # 単にdocker-compose upをしただけでは、このplaywrightサービスは動かないようにする --profile e2e-mockが指定されたら動かせる
      - e2e-mock
    depends_on:
      - backend
      - frontend
    working_dir: /app
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./playwright-mock:/app  # ← テストケースファイルはこの中のe2e_testsディレクトリだが、test_resultsもここに作成される
    # entrypoint: [ "tail", "-f", "/dev/null" ]  # デバッグ用。任意で変更可。
  
  # nginx:
  #   image: nginx:latest
  #   container_name: djangoblog_local_nginx
  #   restart: always
  #   # user: "${UID}:${GID}" # いらん
  #   depends_on:
  #     - backend
  #     - frontend
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/cert.pem:/etc/nginx/cert.pem
  #     - ./nginx/key.pem:/etc/nginx/key.pem
  #   ports:
  #     - "443:443"
volumes:
  db_data:
  node_modules:  # Vueプロジェクトの依存ファイルを保持するボリューム