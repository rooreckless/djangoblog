# CodeBuildが使う、ビルド時に実行する内容
# template.ymlのType: AWS::CodeBuild::ProjectなリソースCodeBuildProjectで、Source.BuildSpecでこのymlを指定している
version: 0.2

phases:
  # phasesはCodebuildが各フェーズでそれぞれ実行することを示す。
  # Codebuildのライフサイクルにおいて、各フェーズは　https://qiita.com/hiroaki-u/items/b527264093eeb1e406e2#codebuild-1
  # buildpsec.ymlに記述できるのは、以下のようにinstall ,prebuild,build,post_buildのみ
  install:
    commands:
      - echo "[installフェーズ]"
      - set -e
      - set -x  # ← 追加：実行されるコマンドをすべて出力
      # - pwd     # ← 出力は、/codebuild/output/srcランダムな数字/src
      # 以下の変数は」CodeBuildで最初から使える環境変数
      # https://docs.aws.amazon.com/ja_jp/codebuild/latest/userguide/build-env-ref-env-vars.html
      - echo "CODEBUILD_SRC_DIR=$CODEBUILD_SRC_DIR"       # ← 出力はCODEBUILD_SRC_DIR=/codebuild/output/srcランダムな数字/src = codebuild実行直後のpwdと一緒
      - echo "CODEBUILD_BUILD_ID=$CODEBUILD_BUILD_ID"     # ← 出力はCODEBUILD_BUILD_ID=MyAppBuild:uuid
      - echo "CODEBUILD_BUILD_ARN=$CODEBUILD_BUILD_ARN"   # ← 出力は
      # - ls -la .                                        # ← この時点でリポジトリの内容がカレントディレクトリに存在している。
      - apt-get update                                    # ← このフェースの残りは必要なパッケージのインストールとアップデート
      - apt-get install -y jq git
      - which git
      - which jq
      - jq --version
  pre_build:
    commands:
      - echo "[pre_buildフェーズ] docker-hubログイン"
      - export DOCKER_USERNAME=$(aws ssm get-parameter --name dockerhub_username --query "Parameter.Value" --output text)
      - export DOCKER_PASSWORD=$(aws ssm get-parameter --name dockerhub_password --with-decryption --query "Parameter.Value" --output text)
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin # dockerhubへログインをしない状態でcodebuildを使いまくると、dockerhubへのアクセス過剰でおちるので、対策としてdockerhubへログインしている
      - echo "[pre_buildフェーズ] 環境変数ファイル作成、値の取得と書換"
      # 環境変数ファイル・ディレクトリを作成
      - mkdir -p .envs/development
      # 環境変数ファイルはparamterstoreからget-paramterを--with-decryptionつきで実施 -> ファイルへ出力
      - aws ssm get-parameter --name djangoblog_envs_development_frontend --with-decryption --query "Parameter.Value" --output text > .envs/development/frontend

      - aws ssm get-parameter --name djangoblog_envs_development_django --with-decryption --query "Parameter.Value" --output text > .envs/development/django

      - aws ssm get-parameter --name djangoblog_envs_development_postgres --with-decryption --query "Parameter.Value" --output text > .envs/development/postgres
      - echo "[pre_buildフェーズ] 起動したEC2のパブリックIPを取得して、環境変数ファイルを書き換え"
      # -- 環境変数ファイルの内、EC2のパブリックIPアドレスが必要なところを書き換える --
      # 1プロセスで実行するため、|で記述している
      - |
        # 起動しているEC2インスタンスのIDをaws-cliで取得
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=MyAppEc2" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        # そのEC2インスタンスのパブリックIPをaws-cliで取得
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)
        echo "Public IP = $PUBLIC_IP"
        echo "[pre_buildフェーズ] Patching env files with PUBLIC_IP"
        # 書き換え開始
        sed -i "s|DJANGO_ALLOWED_HOSTS=.*|DJANGO_ALLOWED_HOSTS=$PUBLIC_IP|" .envs/development/django
        sed -i "s|VITE_API_HOST_ADDRESS=.*|VITE_API_HOST_ADDRESS=http://$PUBLIC_IP:8080|" .envs/development/frontend
        sed -i "s|VITE_FRONT_HOST_ADDRESS=.*|VITE_FRONT_HOST_ADDRESS=http://$PUBLIC_IP:8080|" .envs/development/frontend

  build:
    commands:
      - echo "[buildフェーズ] ソースステージでの取得したソースコードの所有者を変更(root -> 1000)"
      - chown -R 1000:1000 .
      - echo "[buildフェーズ] フロントエンドコンテナのビルド開始"
      - docker compose -f development.yml run --rm frontend

  post_build:
    commands:
      - echo "[post_buildフェーズ] CodeDeployへと渡すアーティファクトの準備"
      - mkdir -p output
      # - pwd               # ← この時点まででcdを実行していないので、pre_buildフェースのpwdと同じ場所である 
      # - ls -la .          # ← この時点で、リポジトリの内容がカレントディレクトリに存在している。 
      # - ls -la output     # ← この時点では、outputディレクトリは空っぽ
      - echo "[post_buildフェーズ] 現在のソースコード全体をoutputディレクトリにコピー"
      - rsync -av --exclude output ./ output/     # カレントディレクトリ内の全ファイル・ディレクトリを、outputディレクトリそのものは除き、outputディレクトリへコピー
      - cp aws_deploy/appspec.yml output/appspec.yml  # appspec.yml自体は、outputディレクトリ直下にないといけないので、いどう
      # - ls -la output     # ← outputディレクトリは、リポジトリの内容と、直下にappspec.ymlがある状態になっている
artifacts:
  base-directory: output # CODEBUILD_SRC_DIR直下のoutput をルートとする
  files:
    - '**/*'            # アーティファクト(= Codebuildとしての最終出力)は、base-directoryの内容のすべて(=output内(output自体は含まない))以下のすべてのファイルを対象にする
  

